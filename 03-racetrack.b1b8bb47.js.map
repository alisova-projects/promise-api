{"version":3,"sources":["js/03-racetrack.js"],"names":["horses","raceCounter","refs","startBtn","document","querySelector","winnerField","progressField","tableBody","onStart","promises","map","run","updateWinnerField","updateProgressField","determineWinner","waitForAll","horsesP","Promise","race","then","horse","time","updateResultsTable","all","message","textContent","tr","insertAdjacentHTML","resolve","getRandomTime","setTimeout","min","max","Math","floor","random","addEventListener"],"mappings":";;;AA6EC,aA7ED,QAAA,qBAEA,IAAMA,EAAS,CACb,cACA,UACA,kBACA,aACA,cAGEC,EAAc,EACZC,EAAO,CACXC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAKpC,SAASI,IACPR,GAAe,EACTS,IAAAA,EAAWV,EAAOW,IAAIC,GAE5BC,EAAkB,IAClBC,EAAoB,4CACpBC,EAAgBL,GAChBM,EAAWN,GAGb,SAASK,EAAgBE,GACvBC,QAAQC,KAAKF,GAASG,KAAK,SAAqB,GAAlBC,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KACnCT,EAAgCQ,cAAAA,OAAAA,EAAyBC,qBAAAA,OAAAA,EAAzD,kBAEAC,EAAmB,CAAEF,MAAAA,EAAOC,KAAAA,EAAMrB,YAAAA,MAItC,SAASe,EAAWC,GAClBC,QAAQM,IAAIP,GAASG,KAAK,WACxBN,EAAoB,2CAIxB,SAASD,EAAkBY,GACzBvB,EAAKI,YAAYoB,YAAcD,EAGjC,SAASX,EAAoBW,GAC3BvB,EAAKK,cAAcmB,YAAcD,EAGnC,SAASF,EAAiD,GAA5BF,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMrB,EAAAA,EAAAA,YACnC0B,EAAgB1B,WAAAA,OAAAA,EAAuBoB,aAAAA,OAAAA,EAAiBC,aAAAA,OAAAA,EAA9D,cACApB,EAAKM,UAAUoB,mBAAmB,YAAaD,GAWjD,SAASf,EAAIS,GACJ,OAAA,IAAIH,QAAQ,SAAAW,GACXP,IAAAA,EAAOQ,EAAc,IAAM,MAEjCC,WAAW,WACTF,EAAQ,CAAER,MAAAA,EAAOC,KAAAA,KAChBA,KAIP,SAASQ,EAAcE,EAAKC,GACnBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GA1DtD9B,EAAKC,SAASkC,iBAAiB,QAAS5B","file":"03-racetrack.b1b8bb47.js","sourceRoot":"..\\src","sourcesContent":["import '../css/common.css';\n\nconst horses = [\n  'Secretariat',\n  'Eclipse',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscuit',\n];\n\nlet raceCounter = 0;\nconst refs = {\n  startBtn: document.querySelector('.js-start-race'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  raceCounter += 1;\n  const promises = horses.map(run);\n\n  updateWinnerField('');\n  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\n  determineWinner(promises);\n  waitForAll(promises);\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}\n    –≤—Ä–µ–º–µ–Ω–∏`);\n    updateResultsTable({ horse, time, raceCounter });\n  });\n}\n\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(() => {\n    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n  });\n}\n\nfunction updateWinnerField(message) {\n  refs.winnerField.textContent = message;\n}\n\nfunction updateProgressField(message) {\n  refs.progressField.textContent = message;\n}\n\nfunction updateResultsTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n/*\n * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞\n */\n\n/*\n * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤\n */\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]}